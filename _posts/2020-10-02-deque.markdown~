---
title:  "Deque"
category: algorithm
tags: queue
---
[Deque](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Deque.html)

## Monoqueue

Analogous to monotonic stacks.

## Elastic-size Window

[Maximum Number of Robots Within Budget][maximum-number-of-robots-within-budget]

```java
public int maximumRobots(int[] chargeTimes, int[] runningCosts, long budget) {
    long sum = 0;
    int i = 0, j = 0, n = chargeTimes.length;
    Deque<Integer> dq = new LinkedList<>();
    while (j < n) {
        sum += runningCosts[j];

        // monotonically decreasing
        while (!dq.isEmpty() && chargeTimes[j] >= chargeTimes[dq.peekLast()]) {
            dq.pollLast();
        }
        dq.offerLast(j++);

        // moves i forward
        if (chargeTimes[dq.peekFirst()] + (j - i) * sum > budget) {
            if (dq.peekFirst() == i) {
                dq.pollFirst();
            }
            sum -= runningCosts[i++];
        }
    }

    // sliding window doesn't shrink
    return n - i;
}
```

[maximum-number-of-robots-within-budget]: https://leetcode.com/problems/maximum-number-of-robots-within-budget/
